name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Install dependencies
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y curl jq maven npm gnupg
          
          # Add the Google Cloud SDK distribution URI as a package source
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

          # Import the Google Cloud SDK public key
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          
          # Update and install the Google Cloud SDK
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Save GCP service account key
        run: |
          mkdir -p .secure_files
          echo "${{ secrets.GCP_SA_KEY }}" > .secure_files/abacus-apigee-demo-a9fffc7cc15c.json

      - name: Download secure files
        env:
          GITLAB_AUTH_TOKEN: ${{ secrets.GITLAB_AUTH_TOKEN }}  # Adjust token name as per requirement
        run: |
          curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
          download-secure-files --auth-token $GITLAB_AUTH_TOKEN

      - name: Execute custom script
        run: |
          source ./revision1.sh ${{ secrets.ORG }} ${{ secrets.PROXY_NAME }} ${{ secrets.APIGEE_ENVIRONMENT }}
          echo "access_token=$access_token" >> build.env
          echo "stable_revision_number=$stable_revision_number" >> build.env
        env:
          ORG: ${{ secrets.ORG }}
          PROXY_NAME: ${{ secrets.PROXY_NAME }}
          APIGEE_ENVIRONMENT: ${{ secrets.APIGEE_ENVIRONMENT }}
    
      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-env
          path: build.env

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-env
          path: build.env

      - name: Deploy
        run: |
          source build.env
          echo "stable revision at stage deploy: $stable_revision_number"
          mvn clean install -f ${{ github.workspace }}/${{ secrets.PROXY_NAME }}/pom.xml \
            -P${{ secrets.APIGEE_ENVIRONMENT }} \
            -Dorg=${{ secrets.ORG }} \
            -Dbearer=$access_token

# Uncomment and translate the integration_test and undeploy stages if needed
# integration_test:
#   runs-on: ubuntu-latest
#   needs: [build, deploy]
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#
#     - name: Integration Test
#       run: |
#         source build.env
#         echo "stable revision at stage integration_test: $stable_revision_number"
#         bash ./integration.sh ${{ secrets.ORG }} $base64encoded $NEWMAN_TARGET_URL
#       env:
#         NEWMAN_TARGET_URL: ${{ secrets.NEWMAN_TARGET_URL }}

# undeploy:
#   runs-on: ubuntu-latest
#   needs: [build, integration_test]
#   if: failure()
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#
#     - name: Undeploy
#       run: |
#         source build.env
#         echo "stable revision at stage integration_test: $stable_revision_number"
#         cd ${{ github.workspace }}  # Set the working directory to the project root
#         bash ./undeploy.sh ${{ secrets.ORG }} $base64encoded ${{ secrets.PROXY_NAME }} $stable_revision_number ${{ secrets.APIGEE_ENVIRONMENT }}
