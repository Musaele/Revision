name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  ORG: 'abacus-apigee-demo'
  PROXY_NAME: 'test-call'
  APIGEE_ENVIRONMENT: 'dev2'
  
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.access_token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Install dependencies
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y curl jq maven npm gnupg
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Verify base64-encoded service account key
        run: |
          echo "Base64-encoded service account key:"
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}"

      - name: Decode and write service account key to file
        run: |
          mkdir -p .secure_files
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 --decode > .secure_files/service-account.json

      - name: Check service account key file
        run: |
          echo "Service account key file content:"
          cat .secure_files/service-account.json

      - name: Make revision1.sh executable
        run: |
          chmod +x ./revision1.sh

      - name: Execute custom script
        run: |
          ./revision1.sh ${{ env.ORG }} ${{ env.PROXY_NAME }} ${{ env.APIGEE_ENVIRONMENT }}
        env:
          ORG: ${{ env.ORG }}
          PROXY_NAME: ${{ env.PROXY_NAME }}
          APIGEE_ENVIRONMENT: ${{ env.APIGEE_ENVIRONMENT }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Echo access token
        run: |
          echo "Access token before Maven build and deploy: ${{ env.access_token }}"
      
      - name: Echo Output  
        run: echo "access_token=${{needs.build.outputs.output1}}" >> $GITHUB_ENV
       
      - name: Verify POM file path
        run: |
          echo "Verifying POM file path..."
          ls -l ${{ github.workspace }}/test-call

      - name: Maven build and deploy
        run: |
          mvn clean install -f ${{ github.workspace }}/${{ env.PROXY_NAME }}/pom.xml \
            -Dorg=${{ secrets.ORG }} \
            -Dapigee.environment=${{ env.APIGEE_ENVIRONMENT }} \
            -Dproxy.name=${{ env.PROXY_NAME }} \
            -Dbearer=${{ env.access_token }} -e -X

      - name: Verify deployment status
        run: |
          # Add verification steps here if necessary
          echo "Deployment verification completed."
