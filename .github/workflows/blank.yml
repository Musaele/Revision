name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Install dependencies
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y curl jq maven npm gnupg
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Verify base64-encoded service account key
        run: |
          echo "Base64-encoded service account key:"
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}"

      - name: Decode and write service account key to file
        run: |
          mkdir -p .secure_files
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 --decode > .secure_files/service-account.json

      - name: Check service account key file
        run: |
          echo "Service account key file content:"
          cat .secure_files/service-account.json

      - name: Execute revision.sh script to obtain access token and stable revision number
        run: |
          chmod +x ./revision.sh
          ./revision.sh ${{ secrets.ORG }} ${{ secrets.PROXY_NAME }} ${{ secrets.APIGEE_ENVIRONMENT }}
        env:
          ORG: ${{ secrets.ORG }}
          PROXY_NAME: ${{ secrets.PROXY_NAME }}
          APIGEE_ENVIRONMENT: ${{ secrets.APIGEE_ENVIRONMENT }}

      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-env
          path: .secure_files/build.env

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-env
          path: .secure_files

      - name: Display build.env contents
        run: |
          cat .secure_files/build.env

      - name: Source build.env
        run: |
          source .secure_files/build.env
          echo "Access token at stage deploy: $access_token"
          echo "Stable revision at stage deploy: $stable_revision_number"

      - name: Verify POM file path
        run: |
          echo "Verifying POM file path..."
          ls -l ${{ github.workspace }}/test-call

      - name: Maven build
        run: |
          mvn clean install -f ${{ github.workspace }}/test-call/pom.xml \
            -Dorg=${{ secrets.ORG }} \
            -Dbearer=$access_token
